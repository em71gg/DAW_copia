// Se abre o crea la base de datos IndexedDB con nombre "CriminalDB" y versi√≥n 1
let db;
const request = indexedDB.open("CriminalDB", 1);

// Evento que se ejecuta si la base de datos necesita ser creada o actualizada
request.onupgradeneeded = (event) => {
    db = event.target.result;

    // Se verifica si el almac√©n de objetos "criminales" no existe para crearlo
    if (!db.objectStoreNames.contains("criminales")) {
        const store = db.createObjectStore("criminales", { keyPath: "id", autoIncrement: true });

        // Se crean √≠ndices para facilitar la b√∫squeda por nombre y fecha
        store.createIndex("criminal", "nombre", { unique: false });
        store.createIndex("fecha", "fecha", { unique: false });
        /*
        store.createIndex(nombreIndice, clave, opciones)
        "criminal" y "fecha" ‚Üí Son los nombres de los √≠ndices.
        "nombre" y "fecha" ‚Üí Son las propiedades de los objetos que se indexar√°n.
        { unique: false } ‚Üí Permite que varios registros tengan el mismo valor en estos √≠ndices.
        ¬øPara qu√© sirven?
        "criminal": Permite buscar criminales por su nombre m√°s r√°pido.
        "fecha": Permite buscar registros por fecha de detenci√≥n sin recorrer toda la base de datos.
        Ambos √≠ndices mejoran la eficiencia al recuperar datos sin necesidad de hacer un barrido completo de los registros. üöÄ
        */
    }
};

// Manejo de evento cuando la base de datos se abre exitosamente
request.onsuccess = (event) => {
    db = event.target.result;
    /*
    event.target: Hace referencia al evento request.onsuccess o request.onupgradeneeded, 
    donde se obtiene el resultado de abrir la base de datos.
    .result: Contiene la instancia de la base de datos IndexedDB que se abri√≥ o cre√≥ exitosamente.
    db = ...: Guarda la referencia de la base de datos en la variable global db, permitiendo acceder 
    a la base de datos en otras partes del c√≥digo.
    En resumen, esta l√≠nea asigna la base de datos IndexedDB abierta a la variable db para que pueda 
    ser utilizada en operaciones futuras, como transacciones o consultas.
    */
    console.log("Conexi√≥n a la base de datos establecida.");
};

// Manejo de errores en caso de que la base de datos no pueda abrirse
request.onerror = () => {
    console.error("Error al abrir la base de datos.");
};

// Evento que escucha el clic en el bot√≥n de registro de criminales
document.getElementById('registrarBtn').addEventListener('click', registrarCriminal);

// Funci√≥n para registrar un criminal en la base de datos
function registrarCriminal() {
    // Obtenci√≥n de valores de los campos del formulario
    const nombre = document.getElementById('nombre').value.trim();
    const fecha = document.getElementById('fecha').value;
    const foto = document.getElementById('foto').files[0];
    const informe = document.getElementById('informe').files[0];

    // Validaci√≥n para asegurarse de que los campos obligatorios no est√©n vac√≠os
    if (!nombre || !foto || !informe) {
        alert("Completa todos los campos.");
        return;
    }

    // Creaci√≥n de objetos FileReader para leer los archivos adjuntos
    const readerFoto = new FileReader();
    const readerInforme = new FileReader();

    // Lectura del archivo de imagen y conversi√≥n a base64
    readerFoto.onload = () => {
        const fotoUrl = readerFoto.result;
        
        // Lectura del archivo de informe y conversi√≥n a base64
        readerInforme.onload = () => {
            const informeData = readerInforme.result;

            // Se crea el objeto con los datos del criminal
            const registro = { nombre, fecha, foto: fotoUrl, informe: informeData };

            // Se inicia una transacci√≥n para escribir en la base de datos
            /*
            db.transaction(["criminales"], "readwrite")
            Crea una transacci√≥n sobre el almac√©n de objetos "criminales".
            Se usa el modo "readwrite" para permitir lectura y escritura (modificaci√≥n de datos).
            La transacci√≥n agrupa m√∫ltiples operaciones para garantizar su atomicidad (si una falla, todas se revierten).
            transaction.objectStore("criminales")

            Obtiene el almac√©n de objetos "criminales" dentro de la transacci√≥n.
            Permite realizar operaciones como agregar (add), obtener (get), actualizar (put) o eliminar (delete) registros.
            En resumen, este c√≥digo inicia una transacci√≥n y accede al almac√©n de objetos "criminales" para operar sobre la 
            base de datos IndexedDB.
            */
            const transaction = db.transaction(["criminales"], "readwrite");
            const store = transaction.objectStore("criminales");

            // Se a√±ade el nuevo registro a la base de datos
            store.add(registro);

            // Al completarse la transacci√≥n, se muestra un mensaje y se reinicia el formulario
            transaction.oncomplete = () => {
                alert("Criminal registrado.");
                document.getElementById('criminalForm').reset();
                document.getElementById('vistaPreviaFoto').style.display = 'none';
                document.getElementById('nombreFoto').textContent = 'Ning√∫n archivo seleccionado';
                document.getElementById('nombreInforme').textContent = 'Ning√∫n archivo seleccionado';
            };
        };
        
        // Se lee el archivo de informe como base64
        readerInforme.readAsDataURL(informe);
    };

    // Se lee el archivo de foto como base64
    readerFoto.readAsDataURL(foto);
}

// Funci√≥n para mostrar la lista de criminales almacenados en la base de datos
function mostrarCriminales() {
    const resultadosDiv = document.getElementById('resultados');
    resultadosDiv.innerHTML = '';

    // Se inicia una transacci√≥n en modo lectura para obtener los datos

    /*
    db.transaction(["criminales"], "readonly")

    Inicia una transacci√≥n en modo "readonly", lo que significa que solo permite leer datos, sin modificar ni eliminar registros.
    La transacci√≥n se realiza sobre el almac√©n de objetos "criminales".
    transaction.objectStore("criminales")

    Accede al almac√©n de objetos "criminales" dentro de la transacci√≥n.
    Este almac√©n contiene la informaci√≥n registrada en la base de datos.
    store.getAll()

    Recupera todos los registros almacenados en el almac√©n de objetos "criminales".
    Se obtiene un objeto IDBRequest, cuya propiedad onsuccess debe manejarse para acceder a los datos 
    una vez que la operaci√≥n se complete correctamente.
    En resumen, este c√≥digo se usa para leer todos los criminales registrados en la base de datos sin realizar modificaciones.
    */
    const transaction = db.transaction(["criminales"], "readonly");
    const store = transaction.objectStore("criminales");
    const consulta = store.getAll();

    // Cuando la consulta es exitosa, se procesan los datos obtenidos
    consulta.onsuccess = () => {
        const criminales = consulta.result;

        // Si no hay registros, se muestra un mensaje indicando que la base de datos est√° vac√≠a
        if (criminales.length === 0) {
            resultadosDiv.innerHTML = '<p>No hay criminales registrados.</p>';
        } else {
            // Se recorre la lista de criminales y se muestran sus datos
            criminales.forEach(c => {
                resultadosDiv.innerHTML += `<p><strong>Nombre:</strong> ${c.nombre}, <strong>Fecha de detenci√≥n:</strong> ${c.fecha 
                    || 'En libertad'}</p>`;
            });
        }
    };
}

// Funci√≥n para buscar criminales por nombre utilizando el √≠ndice "criminal"
function buscarPorNombre() {
    const nombre = document.getElementById('buscar-nombre').value.trim();
    const resultadosDiv = document.getElementById('resultados');
    resultadosDiv.innerHTML = '';

    // Se inicia una transacci√≥n en modo lectura
    const transaction = db.transaction(["criminales"], "readonly");
    const store = transaction.objectStore("criminales");
    const index = store.index("criminal");
    const consulta = index.getAll();

    // Cuando la consulta es exitosa, se filtra el resultado por nombre
    consulta.onsuccess = () => {
        const criminal = consulta.result.find(c => c.nombre.toLowerCase() === nombre.toLowerCase());
        /*
        consulta.result

        consulta es el objeto IDBRequest que obtiene todos los datos almacenados en el √≠ndice "criminal" dentro de IndexedDB.
        .result contiene un array con todos los registros obtenidos.
        .find(c => c.nombre.toLowerCase() === nombre.toLowerCase())

        Se usa el m√©todo .find() para buscar en el array el primer elemento (c) cuyo nombre coincida con el valor 
        de nombre ingresado por el usuario.
        .toLowerCase() convierte ambos nombres a min√∫sculas para hacer la comparaci√≥n insensible a may√∫sculas y min√∫sculas.
        En resumen:
        Esta l√≠nea busca dentro de la base de datos si existe un criminal con el mismo nombre ingresado en la b√∫squeda. 
        Si lo encuentra, criminal contendr√° el objeto con los datos del criminal; si no, su valor ser√° undefined.
        */

        // Se muestra el resultado si se encontr√≥ un registro, de lo contrario, se indica que no hay coincidencias
        if (!criminal) {
            resultadosDiv.innerHTML = `<p>No se encontr√≥ ning√∫n criminal con el nombre "${nombre}".</p>`;
        } else {
            resultadosDiv.innerHTML = `<p><strong>Nombre:</strong> ${criminal.nombre}, <strong>Fecha de detenci√≥n:</strong> ${criminal.fecha || 'En libertad'}</p>`;
        }
    };
}
